using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.IO;
using System.Linq;
using Microsoft.EntityFrameworkCore;

namespace DbManagementApp
{
    // Database Context
    public class AppDbContext : DbContext
    {
        public DbSet<User> Users { get; set; }
        public DbSet<FileStorage> Files { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlite("Data Source=AppDatabase.db");
        }
    }

    // User Entity
    public class User
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [MaxLength(50)]
        public string Username { get; set; }

        [Required]
        [MaxLength(100)]
        public string PasswordHash { get; set; } // Store hashed password
    }

    // File Storage Entity
    public class FileStorage
    {
        [Key]
        public int Id { get; set; }

        [Required]
        [MaxLength(255)]
        public string FileName { get; set; }

        [Required]
        public byte[] Data { get; set; }

        [ForeignKey("User")]
        public int UserId { get; set; }
        public User User { get; set; }
    }

    class Program
    {
        static void Main(string[] args)
        {
            using (var db = new AppDbContext())
            {
                db.Database.EnsureCreated();
            }

            Console.WriteLine("Welcome to DB Management App");
            while (true)
            {
                Console.WriteLine("\nOptions:");
                Console.WriteLine("1. Register");
                Console.WriteLine("2. Login");
                Console.WriteLine("3. Add File");
                Console.WriteLine("4. View Files");
                Console.WriteLine("5. Delete File");
                Console.WriteLine("6. Exit");
                Console.Write("Choose an option: ");
                var choice = Console.ReadLine();

                switch (choice)
                {
                    case "1":
                        RegisterUser();
                        break;
                    case "2":
                        LoginUser();
                        break;
                    case "3":
                        AddFile();
                        break;
                    case "4":
                        ViewFiles();
                        break;
                    case "5":
                        DeleteFile();
                        break;
                    case "6":
                        return;
                    default:
                        Console.WriteLine("Invalid choice. Try again.");
                        break;
                }
            }
        }

        static void RegisterUser()
        {
            Console.Write("Enter username: ");
            var username = Console.ReadLine();

            Console.Write("Enter password: ");
            var password = Console.ReadLine();

            using (var db = new AppDbContext())
            {
                if (db.Users.Any(u => u.Username == username))
                {
                    Console.WriteLine("Username already exists.");
                    return;
                }

                var passwordHash = BCrypt.Net.BCrypt.HashPassword(password);
                db.Users.Add(new User { Username = username, PasswordHash = passwordHash });
                db.SaveChanges();
                Console.WriteLine("User registered successfully.");
            }
        }

        static void LoginUser()
        {
            Console.Write("Enter username: ");
            var username = Console.ReadLine();

            Console.Write("Enter password: ");
            var password = Console.ReadLine();

            using (var db = new AppDbContext())
            {
                var user = db.Users.FirstOrDefault(u => u.Username == username);
                if (user == null || !BCrypt.Net.BCrypt.Verify(password, user.PasswordHash))
                {
                    Console.WriteLine("Invalid username or password.");
                    return;
                }

                Console.WriteLine("Login successful.");
            }
        }

        static void AddFile()
        {
            Console.Write("Enter your username: ");
            var username = Console.ReadLine();

            Console.Write("Enter file path: ");
            var filePath = Console.ReadLine();

            if (!File.Exists(filePath))
            {
                Console.WriteLine("File does not exist.");
                return;
            }

            using (var db = new AppDbContext())
            {
                var user = db.Users.FirstOrDefault(u => u.Username == username);
                if (user == null)
                {
                    Console.WriteLine("User not found.");
                    return;
                }

                var fileData = File.ReadAllBytes(filePath);
                var fileName = Path.GetFileName(filePath);

                db.Files.Add(new FileStorage { FileName = fileName, Data = fileData, UserId = user.Id });
                db.SaveChanges();

                Console.WriteLine("File added successfully.");
            }
        }

        static void ViewFiles()
        {
            Console.Write("Enter your username: ");
            var username = Console.ReadLine();

            using (var db = new AppDbContext())
            {
                var user = db.Users.FirstOrDefault(u => u.Username == username);
                if (user == null)
                {
                    Console.WriteLine("User not found.");
                    return;
                }

                var files = db.Files.Where(f => f.UserId == user.Id).ToList();
                if (!files.Any())
                {
                    Console.WriteLine("No files found.");
                    return;
                }

                Console.WriteLine("Files:");
                foreach (var file in files)
                {
                    Console.WriteLine($"- {file.FileName} (ID: {file.Id})");
                }
            }
        }

        static void DeleteFile()
        {
            Console.Write("Enter your username: ");
            var username = Console.ReadLine();

            Console.Write("Enter file ID to delete: ");
            if (!int.TryParse(Console.ReadLine(), out var fileId))
            {
                Console.WriteLine("Invalid ID.");
                return;
            }

            using (var db = new AppDbContext())
            {
                var user = db.Users.FirstOrDefault(u => u.Username == username);
                if (user == null)
                {
                    Console.WriteLine("User not found.");
                    return;
                }

                var file = db.Files.FirstOrDefault(f => f.Id == fileId && f.UserId == user.Id);
                if (file == null)
                {
                    Console.WriteLine("File not found.");
                    return;
                }

                db.Files.Remove(file);
                db.SaveChanges();

                Console.WriteLine("File deleted successfully.");
            }
        }
    }
}
